module Main where

open import VNNLIB.Syntax.IOLib
open import VNNLIB.Syntax.Parser using (Err; parseQuery)

open import Reflection.AST.Show using (showTerm)
open import VNNLIB.TypeCheck using (check)
open import Level using (0‚Ñì)
open import Data.Sum.Effectful.Left String 0‚Ñì renaming (Sum‚Çó to Result)
open import Data.Sum.Base renaming (inj‚ÇÅ to error; inj‚ÇÇ to success)
open import Reflection.AST
open import Agda.Builtin.Reflection

open import VNNLIB.Semantics
open import VNNLIB.Types
open import VNNLIB.Syntax using (Query)

-- This only prints if there is an error or if the semantics has been computed
printQuery : Result Query ‚Üí IO ‚ä§
printQuery (error err) = do
  putStrLn "ERROR:\n"
  putStrLn err
  exitFailure
printQuery (success q) = do
  let query = ‚ü¶ q ‚üßùï¢
  let normQuery = normalise (quoteTerm query)
  putStrLn (showTerm (quoteTerm query))


main : IO ‚ä§
main = do
  file ‚à∑ [] ‚Üê getArgs where
    _ ‚Üí do
      putStrLn "usage: Main <SourceFile>"
      exitFailure
  Err.ok result ‚Üê parseQuery <$> readFiniteFile file where
    Err.bad msg ‚Üí do
      putStrLn "PARSE FAILED\n"
      putStrLn (stringFromList msg)
      exitFailure
  printQuery (check result)
