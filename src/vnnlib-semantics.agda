module vnnlib-semantics where

open import Data.List as List
open import Data.String hiding (map)
open import Data.Rational as ‚Ñö
open import Data.Bool
open import Data.Fin as Fin
open import Data.Product as Product
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_)
open import Data.Empty using (‚ä•)
open import Agda.Builtin.Float

open import utils
open import vnnlib-types
open import vnnlib-syntax
open import tensor using (Tensor; TensorShape; tensorLookup)

    
-- Network Implementation Representation
SetOfTensors : List (TensorShape √ó ElementType) ‚Üí Set 
SetOfTensors tensorsInfo =
  (i : Fin (List.length tensorsInfo)) ‚Üí let shape&type = List.lookup tensorsInfo i in Tensor (ElementTypeToSet (proj‚ÇÇ shape&type)) (proj‚ÇÅ shape&type) 

NetworkImplementation : NetworkType ‚Üí Set
NetworkImplementation networkœÑ = SetOfTensors inputs ‚Üí SetOfTensors outputs
  where
    inputs = NetworkType.inputShapes&Types networkœÑ
    outputs = NetworkType.outputShapes&Types networkœÑ

-- Environment Representation
Assignments : Context ‚Üí Set
Assignments Œì = 
  (i : Fin (List.length Œì)) ‚Üí let networkType = List.lookup Œì i in SetOfTensors (NetworkType.inputShapes&Types networkType)

NetworkImplementations : Context ‚Üí Set
NetworkImplementations Œì = 
  (i : Fin (List.length Œì)) ‚Üí let networkType = List.lookup Œì i in NetworkImplementation networkType

Environment : Context ‚Üí Set
Environment Œì = NetworkImplementations Œì √ó Assignments Œì

-- Semantics of Assertions
module _ (Œì : Context) (Œµ : Environment Œì) where

  module _ (œÑ : ElementType) where
    postulate ‚ü¶_‚üß‚Çê : ArithExpr Œì œÑ ‚Üí ElementTypeToSet œÑ
    postulate ‚ü¶_‚üß·∂ú : CompExpr Œì œÑ ‚Üí Bool
   
    ‚ü¶_‚üßreal‚Çê : ArithExpr Œì real ‚Üí ‚Ñö
    ‚ü¶ (constant a) ‚üßreal‚Çê        = a
    ‚ü¶ (negate a) ‚üßreal‚Çê           = 0‚Ñö ‚Ñö.- ‚ü¶ a ‚üßreal‚Çê
    ‚ü¶ (varInput i‚Çô‚Çë‚Çú j·µ¢‚Çô‚Çö indices) ‚üßreal‚Çê = tensorLookup indices {!(((proj‚ÇÇ Œµ) i‚Çô‚Çë‚Çú) j·µ¢‚Çô‚Çö)!} -- (((proj‚ÇÇ Œµ) i‚Çô‚Çë‚Çú) j·µ¢‚Çô‚Çö)
    ‚ü¶ (varOutput i‚Çô‚Çë‚Çú j‚Çí·µ§‚Çú indices) ‚üßreal‚Çê = tensorLookup indices {!!} -- (((((proj‚ÇÅ Œµ) i‚Çô‚Çë‚Çú) (((proj‚ÇÇ Œµ) i‚Çô‚Çë‚Çú))) j‚Çí·µ§‚Çú))
    ‚ü¶ (add []) ‚üßreal‚Çê             = 0‚Ñö
    ‚ü¶ (add (a‚ÇÄ ‚à∑ a)) ‚üßreal‚Çê       = ‚ü¶ a‚ÇÄ ‚üßreal‚Çê ‚Ñö.+ ‚ü¶ (add a) ‚üßreal‚Çê
    ‚ü¶ (mult []) ‚üßreal‚Çê            = 1‚Ñö
    ‚ü¶ (mult (a‚ÇÄ ‚à∑ a)) ‚üßreal‚Çê      = ‚ü¶ a‚ÇÄ ‚üßreal‚Çê ‚Ñö.* ‚ü¶ (mult a) ‚üßreal‚Çê
    ‚ü¶ (minus []) ‚üßreal‚Çê           = 0‚Ñö
    ‚ü¶ (minus (a‚ÇÄ ‚à∑ a)) ‚üßreal‚Çê     = ‚ü¶ a‚ÇÄ ‚üßreal‚Çê ‚Ñö.- ‚ü¶ (add a) ‚üßreal‚Çê

    ‚ü¶_‚üßreal·∂ú : CompExpr Œì real ‚Üí Bool
    ‚ü¶ greaterThan x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.>·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ lessThan x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.<·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ greaterEqual x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.‚â•·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ lessEqual x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê ‚Ñö.‚â§·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ notEqual x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.‚â†·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ equal x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.=·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê

    ‚ü¶_‚üßfloat64‚Çê : ArithExpr Œì float64 ‚Üí Float
    ‚ü¶ (constant a) ‚üßfloat64‚Çê        = a
    ‚ü¶ (negate a) ‚üßfloat64‚Çê           = primFloatMinus 0.0 ‚ü¶ a ‚üßfloat64‚Çê
    ‚ü¶ (varInput i‚Çô‚Çë‚Çú j·µ¢‚Çô‚Çö indices ) ‚üßfloat64‚Çê = tensorLookup indices {!!} -- tensorLookup indices (((proj‚ÇÇ Œµ) i‚Çô‚Çë‚Çú) j·µ¢‚Çô‚Çö)
    ‚ü¶ (varOutput i‚Çô‚Çë‚Çú j‚Çí·µ§‚Çú indices ) ‚üßfloat64‚Çê = tensorLookup indices {!!} -- tensorLookup indices (((((proj‚ÇÅ Œµ) i‚Çô‚Çë‚Çú) (((proj‚ÇÇ Œµ) i‚Çô‚Çë‚Çú))) j‚Çí·µ§‚Çú))
    ‚ü¶ (add []) ‚üßfloat64‚Çê             = 0.0
    ‚ü¶ (add (a‚ÇÄ ‚à∑ a)) ‚üßfloat64‚Çê       = primFloatPlus ‚ü¶ a‚ÇÄ ‚üßfloat64‚Çê ‚ü¶ (add a) ‚üßfloat64‚Çê
    ‚ü¶ (mult []) ‚üßfloat64‚Çê            = 1.0
    ‚ü¶ (mult (a‚ÇÄ ‚à∑ a)) ‚üßfloat64‚Çê      = primFloatTimes ‚ü¶ a‚ÇÄ ‚üßfloat64‚Çê ‚ü¶ (mult a) ‚üßfloat64‚Çê
    ‚ü¶ (minus []) ‚üßfloat64‚Çê           = 0.0
    ‚ü¶ (minus (a‚ÇÄ ‚à∑ a)) ‚üßfloat64‚Çê     = primFloatMinus ‚ü¶ a‚ÇÄ ‚üßfloat64‚Çê  ‚ü¶ (add a) ‚üßfloat64‚Çê

    ‚ü¶_‚üßfloat64·∂ú : CompExpr Œì float64 ‚Üí Bool
    ‚ü¶ greaterThan x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.>·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ lessThan x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.<·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ greaterEqual x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.‚â•·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ lessEqual x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.‚â§·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ notEqual x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.‚â†·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ equal x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.=·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê

  ‚ü¶_‚üß·µá : BoolExpr Œì ‚Üí Bool
  ‚ü¶ (literal b) ‚üß·µá          = b
  ‚ü¶ compExpr (real , snd) ‚üß·µá = ‚ü¶ real ‚üßreal·∂ú snd
  ‚ü¶ compExpr (float64 , snd) ‚üß·µá = ‚ü¶ float64 ‚üßfloat64·∂ú snd
  ‚ü¶ compExpr (fst , snd) ‚üß·µá = ‚ü¶ fst ‚üß·∂ú snd
  ‚ü¶ (andExpr []) ‚üß·µá         = true
  ‚ü¶ (andExpr (b ‚à∑ xb)) ‚üß·µá   = _‚àß_ ‚ü¶ b ‚üß·µá ‚ü¶ (andExpr xb) ‚üß·µá
  ‚ü¶ (orExpr []) ‚üß·µá          = false
  ‚ü¶ (orExpr (b ‚à∑ xb)) ‚üß·µá    = _‚à®_ ‚ü¶ b ‚üß·µá ‚ü¶  (orExpr xb) ‚üß·µá

  ‚ü¶_‚üß‚Çö : Assertion Œì ‚Üí Bool
  ‚ü¶ (assert p) ‚üß‚Çö = ‚ü¶ p ‚üß·µá

-- Semantics of a Query
‚ü¶_‚üßùï¢ : Query ‚Üí Set
‚ü¶ mkQuery networks assertions ‚üßùï¢ =
  let Œì = mkContext networks in (n : NetworkImplementations Œì) ‚Üí ‚àÉ Œª (x : Assignments Œì) ‚Üí List.foldl (Œª z z‚ÇÅ ‚Üí and (z ‚à∑ ‚ü¶ Œì ‚üß‚Çö (n , x) z‚ÇÅ ‚à∑ [])) true assertions ‚â° true



