module vnnlib-semantics where

open import Data.List as List
open import Data.String hiding (map)
open import Data.Rational as ‚Ñö
open import Data.Bool
open import Data.Fin as Fin
open import Data.Product as Product
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_)
open import Agda.Builtin.Float

open import utils
open import vnnlib-types
open import vnnlib-syntax
open import tensor

private
  variable
    œÑ : ElementType
    shape : TensorShape

-- Semantics of Assertions
module _ (Œì : Context) where

  -- Network Implementation Representation
  InputTensor : (i : NetworkRef Œì) ‚Üí InputRef Œì i œÑ shape ‚Üí Set
  InputTensor  {œÑ} {shape} i j = Tensor (ElementTypeToSet œÑ) shape

  InputTensors : (i : NetworkRef Œì) ‚Üí Set
  InputTensors i = ‚àÄ {œÑ} {shape} (j : InputRef Œì i œÑ shape) ‚Üí InputTensor i j

  OutputTensor : (i : NetworkRef Œì) ‚Üí OutputRef Œì i œÑ shape ‚Üí Set
  OutputTensor {œÑ} {shape} i j = Tensor (ElementTypeToSet œÑ) shape

  OutputTensors : (i : NetworkRef Œì) ‚Üí Set
  OutputTensors i = ‚àÄ {œÑ} {shape} (j : OutputRef Œì i œÑ shape) ‚Üí OutputTensor i j

  NetworkImplementation : NetworkRef Œì ‚Üí Set
  NetworkImplementation i = InputTensors i ‚Üí OutputTensors i

  -- Environment Representation
  Assignments : Set
  Assignments = (i : NetworkRef Œì) ‚Üí InputTensors i

  NetworkImplementations : Set
  NetworkImplementations = (i : NetworkRef Œì) ‚Üí NetworkImplementation i

  Environment : Set
  Environment = NetworkImplementations √ó Assignments

  module _ (Œµ : Environment) where
    -- Semantics for real --
    ‚ü¶_‚üßreal‚Çê : ArithExpr Œì real ‚Üí ‚Ñö
    ‚ü¶ (constant a) ‚üßreal‚Çê        = a
    ‚ü¶ (negate a) ‚üßreal‚Çê           = 0‚Ñö ‚Ñö.- ‚ü¶ a ‚üßreal‚Çê
    ‚ü¶ (varInput i j indices) ‚üßreal‚Çê = tensorLookup indices (proj‚ÇÇ Œµ i j)
    ‚ü¶ (varOutput i j indices) ‚üßreal‚Çê = tensorLookup indices ((proj‚ÇÅ Œµ i) (proj‚ÇÇ Œµ i) j)
    ‚ü¶ (add []) ‚üßreal‚Çê             = 0‚Ñö
    ‚ü¶ (add (a‚ÇÄ ‚à∑ a)) ‚üßreal‚Çê       = ‚ü¶ a‚ÇÄ ‚üßreal‚Çê ‚Ñö.+ ‚ü¶ (add a) ‚üßreal‚Çê
    ‚ü¶ (mult []) ‚üßreal‚Çê            = 1‚Ñö
    ‚ü¶ (mult (a‚ÇÄ ‚à∑ a)) ‚üßreal‚Çê      = ‚ü¶ a‚ÇÄ ‚üßreal‚Çê ‚Ñö.* ‚ü¶ (mult a) ‚üßreal‚Çê
    ‚ü¶ (minus []) ‚üßreal‚Çê           = 0‚Ñö
    ‚ü¶ (minus (a‚ÇÄ ‚à∑ a)) ‚üßreal‚Çê     = ‚ü¶ a‚ÇÄ ‚üßreal‚Çê ‚Ñö.- ‚ü¶ (add a) ‚üßreal‚Çê

    ‚ü¶_‚üßreal·∂ú : CompExpr Œì real ‚Üí Bool
    ‚ü¶ greaterThan x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.>·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ lessThan x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.<·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ greaterEqual x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.‚â•·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ lessEqual x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê ‚Ñö.‚â§·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ notEqual x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.‚â†·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    ‚ü¶ equal x x‚ÇÅ ‚üßreal·∂ú = ‚ü¶ x ‚üßreal‚Çê Real.=·µá ‚ü¶ x‚ÇÅ ‚üßreal‚Çê
    
    -- Semantics for float64 --
    ‚ü¶_‚üßfloat64‚Çê : ArithExpr Œì float64 ‚Üí Float
    ‚ü¶ (constant a) ‚üßfloat64‚Çê        = a
    ‚ü¶ (negate a) ‚üßfloat64‚Çê           = primFloatMinus 0.0 ‚ü¶ a ‚üßfloat64‚Çê
    ‚ü¶ (varInput i j indices ) ‚üßfloat64‚Çê = tensorLookup indices (proj‚ÇÇ Œµ i j)
    ‚ü¶ (varOutput i j indices) ‚üßfloat64‚Çê = tensorLookup indices ((proj‚ÇÅ Œµ i) (proj‚ÇÇ Œµ i) j)
    ‚ü¶ (add []) ‚üßfloat64‚Çê             = 0.0
    ‚ü¶ (add (a‚ÇÄ ‚à∑ a)) ‚üßfloat64‚Çê       = primFloatPlus ‚ü¶ a‚ÇÄ ‚üßfloat64‚Çê ‚ü¶ (add a) ‚üßfloat64‚Çê
    ‚ü¶ (mult []) ‚üßfloat64‚Çê            = 1.0
    ‚ü¶ (mult (a‚ÇÄ ‚à∑ a)) ‚üßfloat64‚Çê      = primFloatTimes ‚ü¶ a‚ÇÄ ‚üßfloat64‚Çê ‚ü¶ (mult a) ‚üßfloat64‚Çê
    ‚ü¶ (minus []) ‚üßfloat64‚Çê           = 0.0
    ‚ü¶ (minus (a‚ÇÄ ‚à∑ a)) ‚üßfloat64‚Çê     = primFloatMinus ‚ü¶ a‚ÇÄ ‚üßfloat64‚Çê  ‚ü¶ (add a) ‚üßfloat64‚Çê

    ‚ü¶_‚üßfloat64·∂ú : CompExpr Œì float64 ‚Üí Bool
    ‚ü¶ greaterThan x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.>·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ lessThan x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.<·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ greaterEqual x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.‚â•·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ lessEqual x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.‚â§·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ notEqual x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.‚â†·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê
    ‚ü¶ equal x x‚ÇÅ ‚üßfloat64·∂ú = ‚ü¶ x ‚üßfloat64‚Çê Float64.=·µá ‚ü¶ x‚ÇÅ ‚üßfloat64‚Çê

    ‚ü¶_‚üß·µá : BoolExpr Œì ‚Üí Bool
    ‚ü¶ (literal b) ‚üß·µá          = b
    ‚ü¶ compExpr (real , snd) ‚üß·µá = ‚ü¶ snd ‚üßreal·∂ú
    ‚ü¶ compExpr (float64 , snd) ‚üß·µá = ‚ü¶ snd ‚üßfloat64·∂ú
--    ‚ü¶ compExpr (fst , snd) ‚üß·µá = ‚ü¶ fst ‚üß·∂ú snd
    ‚ü¶ (andExpr []) ‚üß·µá         = true
    ‚ü¶ (andExpr (b ‚à∑ xb)) ‚üß·µá   = _‚àß_ ‚ü¶ b ‚üß·µá ‚ü¶ (andExpr xb) ‚üß·µá
    ‚ü¶ (orExpr []) ‚üß·µá          = false
    ‚ü¶ (orExpr (b ‚à∑ xb)) ‚üß·µá    = _‚à®_ ‚ü¶ b ‚üß·µá ‚ü¶  (orExpr xb) ‚üß·µá

    ‚ü¶_‚üß‚Çö : Assertion Œì ‚Üí Bool
    ‚ü¶ (assert p) ‚üß‚Çö = ‚ü¶ p ‚üß·µá

-- Semantics of a Query
‚ü¶_‚üßùï¢ : Query ‚Üí Set
‚ü¶ mkQuery networks assertions ‚üßùï¢ =
  let Œì = mkContext networks in (n : NetworkImplementations Œì) ‚Üí ‚àÉ Œª (x : Assignments Œì) ‚Üí 
              List.foldl (Œª z z‚ÇÅ ‚Üí and (z ‚à∑ ‚ü¶ Œì ‚üß‚Çö (n , x) z‚ÇÅ ‚à∑ [])) true assertions ‚â° true

