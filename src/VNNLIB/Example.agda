module vnnlib-semantics-demo where

open import Data.String using (String; fromList)
open import Data.Nat
open import Data.Bool
open import Data.Product using (_,_)
open import Data.Rational
open import Data.Fin
open import Data.List.Relation.Unary.Any using (Any;here)
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_;refl)
open import Agda.Builtin.Int
open import Data.Integer.Base
open import Data.List.Base
open import Data.Sign.Base
open import Level using (0‚Ñì)
open import Data.Sum.Effectful.Left String 0‚Ñì renaming (Sum‚Çó to Result)
open import Data.Sum.Base renaming (inj‚ÇÅ to error; inj‚ÇÇ to success)
open import Data.Empty using (‚ä•)

open import Syntax.Parser using (Err; parseQuery)
open import Syntax.AST as AST using (Query)

open import tensor
open import vnnlib-semantics
open import vnnlib-types
open import vnnlib-syntax as VNN
open import vnnlib-check

small_vcl_query : String
small_vcl_query = " (vnnlib-version <2.0>)
(declare-network N1
	(declare-input X Real [3])
	(declare-output Y Real [])
)
(assert (and (<= 0 X[0]) (>= 1 X[0])))
(assert (<= 0 Y[0]))
"

-- query = mkQuery
--   (declareNetwork (SVariableName "N1")
--     (declareInput (SVariableName "X") real (3 ‚à∑ []) ‚à∑ [])
--     (declareOutput (SVariableName "Y") real [] ‚à∑ []) ‚à∑ [])
--   (assert
--     (andExpr
--       (compExpr (real , lessEqual (constant 0‚Ñö) (varInput zero (here refl) (non-empty zero tensor.empty))) ‚à∑
--       (compExpr (real , greaterEqual (constant 1‚Ñö) (varInput zero (here refl) (non-empty zero tensor.empty)))) ‚à∑ []))
--    ‚à∑
--    assert (compExpr (real , lessEqual (constant 0‚Ñö) (varOutput zero (here refl) tensor.empty)))
--    ‚à∑ [])

-- Expected semantics for the small_vcl_query
ùï¢ : Set
ùï¢ = (n
 : (i : Fin 1) ‚Üí
   ({œÑ : ElementType} {shape : List ‚Ñï}
    (j
     : Any (_‚â°_ (shape , œÑ))
       (NetworkType.inputShapes&Types
        (Data.List.Base.lookup
         (networkType ((3 ‚à∑ [] , real) ‚à∑ []) (([] , real) ‚à∑ []) ‚à∑ []) i))) ‚Üí
    Tensor (ElementTypeToSet œÑ) shape) ‚Üí
   {œÑ : ElementType} {shape : List ‚Ñï}
   (j
    : Any (_‚â°_ (shape , œÑ))
      (NetworkType.outputShapes&Types
       (Data.List.Base.lookup
        (networkType ((3 ‚à∑ [] , real) ‚à∑ []) (([] , real) ‚à∑ []) ‚à∑ []) i))) ‚Üí
   Tensor (ElementTypeToSet œÑ) shape) ‚Üí
 Data.Product.Œ£
 ((i : Fin 1) {œÑ : ElementType} {shape : List ‚Ñï}
   (j
   : Any (_‚â°_ (shape , œÑ))
     (NetworkType.inputShapes&Types
       (Data.List.Base.lookup
       (networkType ((3 ‚à∑ [] , real) ‚à∑ []) (([] , real) ‚à∑ []) ‚à∑ []) i))) ‚Üí
 Tensor (ElementTypeToSet œÑ) shape)
 (Œª x ‚Üí
   (((Agda.Builtin.Int.Int.pos 0 Data.Integer.Base.‚â§·µá
      ((Data.Integer.Base.sign
        (‚Ü•
         tensorLookup (non-empty zero TensorIndices.empty)
         (x zero (here refl)))
        Data.Sign.Base.* Data.Sign.Base.Sign.+)
       Data.Integer.Base.‚óÉ
       (Data.Integer.Base.‚à£
        ‚Ü•
        tensorLookup (non-empty zero TensorIndices.empty)
        (x zero (here refl))
        ‚à£
        Data.Nat.* 1)))
     ‚àß
     (((Data.Integer.Base.sign
        (‚Ü•
         tensorLookup (non-empty zero TensorIndices.empty)
         (x zero (here refl)))
        Data.Sign.Base.* Data.Sign.Base.Sign.+)
       Data.Integer.Base.‚óÉ
       (Data.Integer.Base.‚à£
        ‚Ü•
        tensorLookup (non-empty zero TensorIndices.empty)
        (x zero (here refl))
        ‚à£
        Data.Nat.* 1))
      Data.Integer.Base.‚â§·µá
      Agda.Builtin.Int.Int.pos
      (‚Ñï.suc
       (‚Ñö.denominator-1
        (tensorLookup (non-empty zero TensorIndices.empty)
         (x zero (here refl)))
        Data.Nat.+ 0)))
     ‚àß true)
    ‚àß true)
   ‚àß
   (Agda.Builtin.Int.Int.pos 0 Data.Integer.Base.‚â§·µá
    ((Data.Integer.Base.sign
      (‚Ü• tensorLookup TensorIndices.empty (n zero (x zero) (here refl)))
      Data.Sign.Base.* Data.Sign.Base.Sign.+)
     Data.Integer.Base.‚óÉ
     (Data.Integer.Base.‚à£
      ‚Ü• tensorLookup TensorIndices.empty (n zero (x zero) (here refl)) ‚à£
      Data.Nat.* 1)))
   ‚àß true
   ‚â° true)


checkedQuery : Result VNN.Query
checkedQuery with parseQuery small_vcl_query
... | Err.ok x = check x
... | Err.bad x = error (fromList x)

checkSemantics : Result VNN.Query ‚Üí {!!}
checkSemantics with checkedQuery
... | error x = {!!}
... | success y = {!!}
  where
    comp = ‚ü¶ y ‚üßùï¢
    c : comp ‚â° ùï¢
    c = {!!}
